=head1 NAME

Dancer::Cookbook - a quick-start guide to the Dancer web framework

=head1 DESCRIPTION

A quick-start guide with examples to get you up and running with the Dancer web
framework.

=head1 RECIPES

=head2 Your first Dancer web app

Dancer has been designed to be easy to work with - it's trivial to write a
simple web app, but still has the power to work with larger projects.  To start
with, let's make an incredibly simple "Hello World" example:

    #!/usr/bin/perl

    use Dancer;

    get '/hello/:name' => sub {
        return "Why, hello there " . params->{name};
    };

    dance;

Yes - the above is a fully-functioning web app; running that script will launch
a webserver listening on the default port (3000); now you can make a request

    $ curl http://localhost:3000/hello/Bob
    Why, hello there Bob

(or the name of the machine you ran it on, if it's not your local system),
and it will say hello.  The C<:name> part is a named parameter within the
route specification, whose value is made available through C<params>
- more on that later.

Note that you don't need to use the C<strict> and C<warnings> pragma, they are
already loaded by Dancer.

=head2 Starting a Dancer project

The first simple example is fine for trivial projects, but for anything more
complex, you'll want a more maintainable solution - enter the C<dancer> helper
script, which will build the framework of your application with a single
command:

    $ dancer -a mywebapp
    + mywebapp
    + mywebapp/config.yml
    + mywebapp/environments
    + mywebapp/environments/development.yml
    + mywebapp/environments/production.yml
    + mywebapp/views
    + mywebapp/views/index.tt
    + mywebapp/views/layouts
    + mywebapp/views/layouts/main.tt
    + mywebapp/mywebapp.pl
    + mywebapp/lib
    + mywebapp/lib/mywebapp.pm
    + mywebapp/public
    + mywebapp/public/css
    + mywebapp/public/css/style.css
    + mywebapp/public/css/error.css
    + mywebapp/public/images
    + mywebapp/public/404.html
    + mywebapp/public/dispatch.fcgi
    + mywebapp/public/dispatch.cgi
    + mywebapp/public/500.html
    + mywebapp/Makefile.PL
    + mywebapp/t
    + mywebapp/t/002_index_route.t
    + mywebapp/t/001_base.t

As you can see, it creates a directory named after the name of the app, along
with a configuration file, a views directory (where your templates and layouts
will live), an environments directory (where environment-specific settings
live), a module containing the actual guts of your application, a script to
start it - or to run your web app via Plack/PSGI - more on that later.


=head2 Declaring routes

To control what happens when a web request is received by your webapp, you'll
need to declare C<routes>.  A route declaration indicates which HTTP method(s)
it is valid for, the path it matches (e.g. /foo/bar), and a coderef to execute,
which returns the response.

    get '/hello/:name' => sub {
        return "Hi there " . params->{name};
    };

The above route specifies that, for GET requests to '/hello/...', the code block
provided should be executed.

=head2 Handling multiple HTTP request methods

Routes can use C<any> to match all, or a specified list of HTTP methods.

The following will match any HTTP request to the path /myaction:

    any '/myaction' => sub {
        # code
    }

The following will match GET or POST requests to /myaction:

    any ['get', 'post'] => '/myaction' => sub {
        # code
    };

For convenience, any route which matches GET requests will also match HEAD
requests.



=head2 Retrieving request parameters

The C<params> method returns a hashref of request parameters; these will be
parameters supplied on the query string, within the path itself (with named
placeholders), and, for HTTTP POST requests, the content of the POST body.


=head2 Named parameters in route path declarations

As seen above, you can use C<:somename> in a route's path to capture part of the
path; this will become available by calling C<params>.

So, for a web app where you want to display information on a company, you might
use something like:

    get '/company/view/:companyid' => sub {
        my $company_id = params->{companyid};
        # Look up the company and return appropriate page
    };


=head2 Wildcard path matching and splat

You can also declare wildcards in a path, and retrieve the values they matched
with C<splat>:

    get '/*/*' => sub {
        my ($action, $id) = splat;
        if (my $action eq 'view') {
            return display_item($id);
        } elsif ($action eq 'delete') {
            return delete_item($id);
        } else {
            status 'not_found';
            return "What?";
        }
    };


=head2 Before filters - processed before a request

A C<before> filter declares code which should be handled before a request is
passed to the appropriate route.

    before sub {
        var note => 'Hi there';
        request->path('/foo/oversee')
    };

    get '/foo/*' => sub {
        my ($match) = splat; # 'oversee';
        vars->{note}; # 'Hi there'
    };

The above declares a before filter which uses C<var> to set a variable which
will later be available within the route handler, then amends the path of the
request to C</foo/oversee>; this means that, whatever path was requested, it
will be treated as though the path requested was C</foo/oversee>.


=head2 Default route

In case you want to avoid a I<404 error>, or handle multiple routes in the same
way and you don't feel like configuring all of them, you can set up a default
route handler.

The default route handler will handle any request that doesn't get served by
any other route.

All you need to do is set up the following route as the B<last> route:

    any qr{.*} => sub {
        status 'not_found';
        template 'special_404', { path => request->path };
    };

Then you can set up the template as such:

    You tried to reach <% path %>, but it is unavailable at the moment.

    Please try again or contact us at our email at <...>.



=head2 Using the auto_page feature for automatic route creation

For simple pages where you're not doing anything dynamic, but still want to use
the template engine to provide headers etc, you can use the auto_page feature to
avoid the need to create a route for each page.

With C<auto_page> enabled, if the requested path does not match any specific
route, Dancer will check in the views directory for a matching template, and use
it to satisfy the request if found.

Simply enable auto_page in your config:

    auto_page: 1

Then, if you request C</foo/bar>, Dancer will look in the views dir for
C</foo/bar.tt>.

=head2 Why should I use the Ajax plugin

As an Ajax query is just a HTTP query, it's similar to a GET or POST
route. You may ask yourself why you may want to use the C<ajax>
keyword (from the L<Dancer::Plugin::Ajax> plugin) instead of a simple
C<get>.

Let's say you have a path like '/user/:user' in your application. You
may want to be able to serve this page, with a layout and HTML
content. But you may also want to be able to call this same url from a
javascript query using Ajax.

So, instead of having the following code:

    get '/user/:user' => sub {
         if (request->is_ajax) {
             # create xml, set headers to text/xml, blablabla
              header('Content-Type' => 'text/xml');
              header('Cache-Control' =>  'no-store, no-cache, must-revalidate');
              to_xml({...})
         }else{
             template users, {....}
         }
    };

you can have

    get '/user/:user' => sub {
        template users, {...}
    }

and

    ajax '/user/:user' => sub {
         to_xml({...}, RootName => undef);
    }


Because it's an ajax query, you know you need to return a xml content,
so the content type of the response is set for you.

=head2 Using the prefix feature to split your application

For better maintainability, you may want to separate some of your application
components to different packages. Let's say we have a simple web app with an
admin section, and want to maintain this in a different package:

    package myapp;
    use Dancer ':syntax';
    use myapp::admin;

    prefix undef;

    get '/' => sub {...};

    1;

    package myapp::admin;
    use Dancer ':syntax';

    prefix '/admin';

    get '/' => sub {...};

    1;

The following routes will be generated for us:

    - get /
    - get /admin/
    - head /
    - head /admin/

=head2 Handling sessions

It's common to want to use sessions to give your web applications state; for
instance, allowing a user to log in, creating a session, and checking that
session on subsequent requests.

To make use of sessions, you must first enable the session engine - pick the
session engine you want to use, then declare it in your config file:
config file, add:

    session: Simple

The L<Dancer::Session::Simple> backend implements very simple in-memory session
storage.  This will be fast and useful for testing, but sessions do not persist
between restarts of your app.

You can also use the L<Dancer::Session::YAML> backend included with Dancer,
which stores session data on disc in YAML files (since YAML is a nice
human-readable format, it makes inspecting the contents of sessions a breeze):

    session: YAML

Or, to enable session support from within your code,

    set session => 'YAML';

(Controlling settings is best done from your config file, though).  'YAML' in
the example is the session backend to use; this is shorthand for
L<Dancer::Session::YAML>.  There are other session backends you may wish to use,
for instance L<Dancer::Session::Memcache>, but the YAML backend is a simple and
easy to use example which stores session data in a YAML file in sessions).

=head3 Storing data in the session

Storing data in the session is as easy as:

    session varname => 'value';


=head3 Retrieving data from the session

Retrieving data from the session is as easy as:

    session('varname')

Or, alternatively,

    session->{varname}


=head3 Controlling where sessions are stored

For disc-based session back ends like L<Dancer::Session::YAML>,
L<Dancer::Session::Storable> etc, session files are written to the session dir
specified by the C<session_dir> setting, which defaults to C<appdir/sessions> if
not specifically set.

If you need to control where session files are created, you can do so quickly
and easily within your config file, for example:

    session_dir: /tmp/dancer-sessions

If the directory you specify does not exist, Dancer will attempt to create it
for you.

=head3 Destroying a session

When you're done with your session, you can destroy it:

    session->destroy

=head2 Sessions and logging in

A common requirement is to check the user is logged in, and, if not, require
them to log in before continuing.

This can easily be handled with a before filter to check their session:

    before sub {

        if (! session('user') && request->path_info !~ m{^/login}) {
            var requested_path => request->path_info;
            request->path_info('/login');
        }
    };

    get '/login' => sub {
        # Display a login page; the original URL they requested is available as
        # vars->{requested_path}, so could be put in a hidden field in the form
        template 'login', { path => vars->{requested_path} };
    };

    post '/login' => sub {
        # Validate the username and password they supplied
        if (params->{user} eq 'bob' && params->{pass} eq 'letmein') {
            session user => params->{user};
            redirect params->{path} || '/';
        } else {
            redirect '/login?failed=1';
        }
    };

In your login page template, you'll want a text field named user, a password
field named pass, and a hidden field named path, which will be populated with
the path originally requested, so that it's sent back in the POST submission,
and can be used by the post route to redirect onwards to the page originally
requested once you're logged in.

Of course, you'll probably want to validate your users against a database table,
or maybe via IMAP/LDAP/SSH/POP3/local system accounts via PAM etc.
L<Authen::Simple> is probably a good starting point here!

A simple working example of handling authentication against a database table
yourself (using L<Dancer::Plugin::Database> which provides the C<database>
keyword, and L<Crypt::SaltedHash> to handle salted hashed passwords (well, you
wouldn't store your users passwords in the clear, would you?)) follows:

    post '/login' => sub {
        my $user = database()->selectrow_hashref(
            'select * from users where username = ?', {}, params->{user}
        );
        if (!$user) {
            warning "Failed login for unrecognised user " . params->{user};
            redirect '/login?failed=1';
        } else {
            if (Crypt::SaltedHash->validate($user->{password}, params->{pass})) 
            {
                debug "Password correct";
                # Logged in successfully
                session user => $user;
                redirect params->{path} || '/';
            } else {
                debug("Login failed - password incorrect for " . params->{user});
                redirect '/login?failed=1';
            }
        }
    };



=head2 Using templates - views and layouts

Returning plain content is all well and good for examples or trivial apps, but
soon you'll want to use templates to maintain separation between your code and
your content.  Dancer makes this easy.

=head3 Views

It's possible to render the action's content with a template, this is called a
view. The `appdir/views' directory is the place where views are located.

You can change this location by changing the setting 'views'.

By default, the internal template engine L<Dancer::Template::Simple> is used,
but you may want to upgrade to Template::Toolkit. If you do so, you have to
enable this engine in your settings as explained in
L<Dancer::Template::TemplateToolkit>.  If you do so, you'll also have to
import the L<Template> module in your application code.

Note that, by default, Dancer configures the Template::Toolkit engine to use
C<<% %>> brackets instead of its default C<[% %]> brackets.  You can change this
by using the following in your config file:

    template: template_toolkit

    engines:
        template_toolkit:
            start_tag: '[%'
            stop_tag: '%]'

All views must have a '.tt' extension. This may change in the future.

In order to render a view, just call the C<template> keyword at the end of the
action by giving the view name and the HASHREF of tokens to interpolate in the
view (note that for convenience, the request, session and route params are
automatically accessible in the view, named request, session and params) - for
example:

    get '/hello/:name' => sub {
        my $name = params->{name};
        template 'hello.tt', { name => $name };
    };

The template 'hello.tt' could contain, for example:

    <p>Hi there, <% name %>!</p>
    <p>You're using <% request.user_agent %></p>
    <% IF session.username %>
        <p>You're logged in as <% session.username %>
    <% END %>

=head3 Layouts

A layout is a special view, located in the 'layouts' directory (inside the views
directory) which must have a token named 'content'. That token marks the place
where to render the action view. This lets you define a global layout for your
actions, and have each individual view contain only the specific content.  This
is a good thing to avoid lots of needless duplication of HTML :)

Here is an example of a layout: C<views/layouts/main.tt> :

    <html>
        <head>...</head>
        <body>
        <div id="header">
        ...
        </div>

        <div id="content">
        <% content %>
        </div>

        </body>
    </html>

You can tell your app which layout to use with C<layout: name> in the config
file, or within your code:

    layout 'main';

You can control which layout to use (or whether to use a layout at all) for a
specific request without altering the layout setting by passing an options
hashref as the third param to the template keyword:

    template 'index.tt', {}, { layout => undef };

If your application is not mounted under root (B</>), you can use a
before_template instead of hardcoding the path to your application for your
css, images and javascript:

    before_template sub {
        my $tokens = shift;
        $tokens->{uri_base} = request->base->path;
    };

THen in your layout, modify your css inclusion as follows:

    <link rel="stylesheet" href="<% uri_base %>/css/style.css" />

From now on, you can mount your application wherever you want, without
any further modification of the css inclusion

=head3 template and unicode

If you use L<Plack> and have some unicode problem with your Dancer application,
don't forget to check if you have set your template engine to use unicode, and
set the default charset to UTF-8. So, if you are using template toolkit, your
config.yml will look like this:

    charset: UTF-8
    engines:
      template_toolkit:
        ENCODING: utf8

=head2 Configuration and environments

Configuring a Dancer application can be done in many ways. The easiest one (and
maybe the the dirtiest) is to put all your settings statements at the top of
your script, before calling the dance() method.

Other ways are possible, you can define all your settings in the file
`appdir/config.yml'. For this, you must have installed the YAML module, and of
course, write the config file in YAML.

That's better than the first option, but it's still not perfect as you can't
switch easily from an environment to another without rewriting the config.yml
file.

The better way is to have one config.yml file with default global settings,
like the following:

    # appdir/config.yml
    logger: 'file'
    layout: 'main'

And then write as many environment files as you like in C<appdir/environments>.
That way, the appropriate environment config file will be loaded according to
the running environment (if none is specified, it will be 'development').

Note that you can change the running environment using the C<--environment>
commandline switch.

Typically, you'll want to set the following values in a development config file:

    # appdir/environments/development.yml
    log: 'debug'
    access_log: 1
    show_errors: 1

And in a production one:

    # appdir/environments/production.yml
    log: 'warning'
    access_log: 0
    show_errors: 0


=head2 Accessing configuration information from your app

A Dancer application can use the 'config' keyword to easily access the settings
within its config file, for instance:

    get '/appname' => sub {
        return "This is " . config->{appname};
    };

This makes keeping your application's settings all in one place simple and easy
- you shouldn't need to worry about implementing all that yourself :)

=head2 Plack middlewares

If you deploy with Plack and use some Plack middlewares, you can enable them
directly from Dancer's configuration files.

To enable middlewares in Dancer, you just have to set the plack_middlewares
setting like the following:

    set plack_middlewares => [
        [ 'SomeMiddleware' => [ qw(some options for somemiddleware) ]],
    ];

For instance, if you want to enable L<Plack::Middleware::Debug> in your Dancer
application, all you have to do is to set C<plack_middlewares> like that:

    set plack_middlewares => [
        [ 'Debug' => [ 'panels' => [ qw(DBITrace Memory Timer) ]]],
    ];

Of course, you can also put this configuration into your config.yml file, or
even in your environment configuration files:

    # environments/development.yml
    ...
    plack_middlewares:
      -
        - Debug          # first element of the array is the name of the middleware
        - panels         # following elements are the configuration ofthe middleware
        -
          - DBITrace
          - Memory
          - Timer

=head2 Logging

=head3 Configuring logging

It's possible to log messages generated by the application and by Dancer itself.

To start logging, select the logging engine you wish to use with the C<logger>
setting; Dancer includes built-in log engines named C<file> and C<console>,
which log to a logfile and to the console respectively.

To enable logging to a file, add the following to your config.yml:

    logger: 'file'

Then you can choose which kind of messages you want to actually log:

    log: 'core'      # will log debug, warning and errors, and messages from
                     # Dancer itself
    log: 'debug'     # will log debug, warning and errors
    log: 'warning'   # will log warning and errors
    log: 'error'     # will log only errors

If you're using the C<file> logging engine, a directory C<appdir/logs> will be
created and will host one logfile per environment. The log message contains the
time it was written, the PID of the current process, the message and the caller
information (file and line).

=head3 Logging your own messages

Just call  C<debug>, C<warning> or C<error> with your message:

    debug "This is a debug message from my app.";

=head2 Writing a REST application

With Dancer, it's easy to write REST application. Dancer provides helpers to serialize and deserialize for the following data format:

=over 4

=item JSON

=item YAML

=item XML

=item Data::Dumper

=back

To activate this feature, you only have to write this:

   serializer => 'JSON'

From now, all hash ref or array ref returned by a route will be serialized to JSON. And all data receive from B<POST> or B<PUT> will be deserialized from JSON.

    get '/hello/:name' => sub {
        # this structure will be returned to the client as
	# {"name":"$name"}
        return {name => params->{name}};
    };

It's possible to let the client choose which serializer he want to use. For this, use the B<mutable> serializer, and an appropriate serializer will be chosen from the B<Content-Type> header.

It's also possible to return custom error, using the C<send_error> function. When you don't use a serializer, the C<send_error> function will take a string as first parameter (the message), and an optional HTTP code. When using a serializer, the message can be a string, an arrayref or a hashref:

    get '/hello/:name' => sub {
        if (...) {
           send_error("you can't do that");
           # or
           send_error({reason => 'access denied', message => "no"});
        }
    };

The content of the error will be serialized using the appropriate serializer.

=head2 Deploying your Dancer applications

For examples on deploying your Dancer applications (including standalone, behind
proxy/load-balancing software, and using common web servers including Apache to
run via CGI/FastCGI etc, see L<Dancer::Deployment>.


=head1 AUTHORS

Dancer contributors - see AUTHORS file.


